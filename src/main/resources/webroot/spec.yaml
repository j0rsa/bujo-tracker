openapi: "3.0.0"
info:
  version: 1.0.0
  title: Bujo tracker
servers:
  - url: http://localhost:8080
  - url: http://10.0.0.18:8080
  - url: http://bujo-tracker.bujo-prod.svc.cluster.local

paths:
  /users:
    post:
      summary: Register or update user
      operationId: createOrUpdateUser
      tags:
        - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIntent'
      responses:
        201:
          description: User created/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserId'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'
  /users/{telegram_id}:
    get:
      summary: Get user by telegram user id
      operationId: getTelegramUser
      parameters:
        - $ref: '#/components/parameters/TelegramUserPath'
      tags:
        - users
      responses:
        200:
          description: User created/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'

  /tags:
    get:
      summary: Get all user tags
      operationId: getAllTags
      parameters:
        - $ref: '#/components/parameters/UserHeader'
      tags:
        - tags
      responses:
        200:
          description: List of tags
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagList'
        500:
          $ref: '#/components/responses/InternalError'
  /tags/{id}:
    post:
      summary: Update the tag
      operationId: updateTag
      parameters:
        - $ref: '#/components/parameters/UserHeader'
        - $ref: '#/components/parameters/IdPath'
      tags:
        - tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagIntent'
      responses:
        200:
          description: Updated tag
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'

  /habits:
    parameters:
      - $ref: '#/components/parameters/UserHeader'
    post:
      summary: Create habit
      operationId: createHabit
      tags:
        - habits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HabitIntent'
      responses:
        201:
          description: Habit created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Habit'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'
    get:
      summary: Get all habits
      operationId: getAllHabits
      tags:
        - habits
      responses:
        200:
          description: User habits
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitInfoList'
        500:
          $ref: '#/components/responses/InternalError'
  /habits/{id}:
    parameters:
      - $ref: '#/components/parameters/UserHeader'
      - $ref: '#/components/parameters/IdPath'
    get:
      summary: Get user habit
      operationId: getHabit
      tags:
        - habits
      responses:
        200:
          description: Habit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HabitInfo'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Update habit
      operationId: updateHabit
      tags:
        - habits
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Habit'
      responses:
        200:
          description: Updated habit
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Habit'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete habit
      operationId: deleteHabit
      tags:
        - habits
      responses:
        204:
          description: Habit deleted
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'

  /actions:
    parameters:
      - $ref: '#/components/parameters/UserHeader'
    post:
      description: Create action with tags
      operationId: createAction
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionIntent'
      responses:
        201:
          description: Action created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionId'
        400:
          $ref: '#/components/responses/BadRequest'
        500:
          $ref: '#/components/responses/InternalError'
    get:
      description: Get all actions
      operationId: getAllActions
      tags:
        - actions
      responses:
        200:
          description: All actions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionList'
        500:
          $ref: '#/components/responses/InternalError'
  /actions/{id}:
    parameters:
      - $ref: '#/components/parameters/UserHeader'
      - $ref: '#/components/parameters/IdPath'
    get:
      summary: Get action
      operationId: getAction
      tags:
        - actions
      responses:
        200:
          description: User action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'
    post:
      summary: Update action
      operationId: updateAction
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Action'
      responses:
        200:
          description: Updated action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Action'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'
    delete:
      summary: Delete Action
      operationId: deleteAction
      tags:
        - actions
      responses:
        204:
          description: Action deleted
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'
  /actions/{id}/value:
    parameters:
      - $ref: '#/components/parameters/UserHeader'
      - $ref: '#/components/parameters/IdPath'
    post:
      summary: Add value to action
      operationId: addActionValue
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Value'
      responses:
        201:
          description: Value added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionId'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'

  /actions/habit/{id}:
    parameters:
      - $ref: '#/components/parameters/UserHeader'
      - $ref: '#/components/parameters/IdPath'
    post:
      summary: Create habit action
      operationId: createHabitAction
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionIntent'
      responses:
        201:
          description: Action created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ActionId'
        400:
          $ref: '#/components/responses/BadRequest'
        404:
          $ref: '#/components/responses/NotFoundResponse'
        500:
          $ref: '#/components/responses/InternalError'

  /health:
    get:
      summary: Health check
      operationId: getHealthInfo
      tags:
        - health
      responses:
        204:
          description: OK
        500:
          description: Service is down

components:
  parameters:
    TelegramUserPath:
      in: path
      name: telegram_id
      schema:
        type: number
    IdPath:
      in: path
      name: id
      schema:
        $ref: '#/components/schemas/UUID'
    UserHeader:
      in: header
      name: X-Auth-Id
      description: User uuid
      schema:
        $ref: '#/components/schemas/UUID'
      required: true

  responses:
    NotFoundResponse:
      description: Object not found
      content:
        application/json:
          schema:
            type: string
            example: "Error: Not Found"
    InternalError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            example: "Error: Internal Error"
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            type: object
            properties:
              error:
                type: string
              details:
                type: string

  schemas:
    UUID:
      type: string
      format: uuid
    Id:
      type: object
      required:
        - value
      properties:
        value:
          $ref: '#/components/schemas/UUID'
    TagList:
      type: array
      items:
        $ref: '#/components/schemas/Tag'
      default: []
    UserId:
      $ref: '#/components/schemas/Id'
    UserIntent:
      type: object
      required:
        - telegramId
        - firstName
        - lastName
        - language
      properties:
        telegramId:
          description: Long id of Telegram user
          type: number
          maxLength: 50
        firstName:
          description: First name
          type: string
          maxLength: 50
        lastName:
          description: Last name
          type: string
          maxLength: 50
        language:
          description: language code for translations
          maxLength: 5
          type: string
    User:
      type: object
      required:
        - id
        - telegramId
        - firstName
        - lastName
        - language
      properties:
        id:
          $ref: '#/components/schemas/UserId'
        telegramId:
          description: Long id of Telegram user
          type: number
        firstName:
          description: First name
          type: string
        lastName:
          description: First name
          type: string
        language:
          description: language code for translations
          type: string
    TagIntent:
      type: object
      required:
        - name
      properties:
        name:
          description: Tag name
          type: string
    Tag:
      type: object
      required:
        - id
        - name
      properties:
        id:
          $ref: '#/components/schemas/TagId'
        name:
          description: Tag name
          type: string
    TagOrIntentList:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/Tag'
          - $ref: '#/components/schemas/TagIntent'
      default: []
    Period:
      enum:
        - Day
        - Week
    DateTime:
      type: string
      format: 'date-time'
    HabitIntent:
      type: object
      required:
        - name
        - tags
        - numberOfRepetitions
        - period
        - values
      properties:
        name:
          type: string
        tags:
          $ref: '#/components/schemas/TagOrIntentList'
        numberOfRepetitions:
          type: integer
          example: 1
        period:
          $ref: '#/components/schemas/Period'
        quote:
          type: string
          example: "Quality is not an act, it is a habit"
        bad:
          type: boolean
          description: Is it bad habit
          default: false
        startFrom:
          $ref: '#/components/schemas/DateTime'
        values:
          $ref: '#/components/schemas/ValueTemplateList'
    HabitInfoList:
      type: array
      items:
        $ref: '#/components/schemas/HabitsInfo'
      default: []
    Habit:
      type: object
      required:
        - id
        - name
        - tags
        - numberOfRepetitions
        - period
        - values
      properties:
        id:
          $ref: '#/components/schemas/HabitId'
        name:
          type: string
        tags:
          $ref: '#/components/schemas/TagOrIntentList'
        numberOfRepetitions:
          type: integer
        period:
          $ref: '#/components/schemas/Period'
        quote:
          type: string
        bad:
          type: boolean
          description: Is it bad habit
          default: false
        startFrom:
          $ref: '#/components/schemas/DateTime'
        values:
          $ref: '#/components/schemas/ValueTemplateList'
    HabitsInfo:
      type: object
      required:
        - habit
        - currentStreak
        - done
      properties:
        habit:
          $ref: '#/components/schemas/Habit'
        currentStreak:
          type: integer
          default: 0
        done:
          description: Finished for requested day
          type: boolean
    HabitInfo:
      type: object
      required:
        - habit
        - streakRow
        - done
      properties:
        habit:
          $ref: '#/components/schemas/Habit'
        streakRow:
          $ref: '#/components/schemas/StreakRow'
        done:
          description: Finished for requested day
          type: boolean
    StreakRow:
      type: object
      required:
        - currentStreak
        - maxStreak
      properties:
        currentStreak:
          type: integer
        maxStreak:
          type: integer
    ValueTemplateList:
      type: array
      items:
        $ref: '#/components/schemas/ValueTemplate'
      default: []
    ValueTemplate:
      type: object
      required:
        - type
        - values
      properties:
        type:
          $ref: '#/components/schemas/ValueType'
        values:
          $ref: '#/components/schemas/ValueStrings'
        name:
          type: string
          description: Name of template value
    ValueStrings:
      type: array
      items:
        type: string
      default: []
    ActionIntent:
      type: object
      required:
        - description
        - tags
        - values
      properties:
        description:
          type: string
        tags:
          $ref: '#/components/schemas/TagOrIntentList'
        habitId:
          $ref: '#/components/schemas/HabitId'
        values:
          $ref: '#/components/schemas/ValueOrIntentList'
    ActionList:
      type: array
      items:
        $ref: '#/components/schemas/Action'
      default: []
    Action:
      type: object
      required:
        - id
        - description
        - tags
        - values
      properties:
        id:
          $ref: '#/components/schemas/ActionId'
        description:
          type: string
        tags:
          $ref: '#/components/schemas/TagOrIntentList'
        habitId:
          $ref: '#/components/schemas/HabitId'
        values:
          $ref: '#/components/schemas/ValueList'
    ValueOrIntentList:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/Value'
          - $ref: '#/components/schemas/ValueIntent'
      default: []
    ValueList:
      type: array
      items:
        $ref: '#/components/schemas/Value'
    Value:
      type: object
      required:
        - id
        - type
      properties:
        id:
          $ref: '#/components/schemas/ValueId'
        type:
          $ref: '#/components/schemas/ValueType'
        value:
          type: string
        name:
          type: string
    ValueIntent:
      type: object
      required:
        - type
      properties:
        type:
          $ref: '#/components/schemas/ValueType'
        value:
          type: string
        name:
          type: string
    ValueType:
      description: Type of value
      enum:
        - Mood
        - EndDate
    ValueId:
      $ref: '#/components/schemas/Id'
    ActionId:
      $ref: '#/components/schemas/Id'
    TagId:
      $ref: '#/components/schemas/Id'
    HabitId:
      $ref: '#/components/schemas/Id'
